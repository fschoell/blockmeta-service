// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sf/blockmeta/v2/blockmeta.proto

package pbbmsrvconnect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect_go "github.com/bufbuild/connect-go"
	blockmeta_service "github.com/streamingfast/blockmeta-service"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BlockName is the fully-qualified name of the BlockService service.
	BlockName = "sf.blockmeta.v2.BlockService"
	// BlockByTimeName is the fully-qualified name of the BlockByTimeService service.
	BlockByTimeName = "sf.blockmeta.v2.BlockByTimeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BlockNumToIDProcedure is the fully-qualified name of the BlockService's NumToID RPC.
	BlockNumToIDProcedure = "/sf.blockmeta.v2.BlockService/NumToID"
	// BlockIDToNumProcedure is the fully-qualified name of the BlockService's IDToNum RPC.
	BlockIDToNumProcedure = "/sf.blockmeta.v2.BlockService/IDToNum"
	// BlockHeadProcedure is the fully-qualified name of the BlockService's Head RPC.
	BlockHeadProcedure = "/sf.blockmeta.v2.BlockService/Head"
	// BlockByTimeAtProcedure is the fully-qualified name of the BlockByTimeService's At RPC.
	BlockByTimeAtProcedure = "/sf.blockmeta.v2.BlockByTimeService/At"
	// BlockByTimeAfterProcedure is the fully-qualified name of the BlockByTimeService's After RPC.
	BlockByTimeAfterProcedure = "/sf.blockmeta.v2.BlockByTimeService/After"
	// BlockByTimeBeforeProcedure is the fully-qualified name of the BlockByTimeService's Before RPC.
	BlockByTimeBeforeProcedure = "/sf.blockmeta.v2.BlockByTimeService/Before"
)

// BlockClient is a client for the sf.blockmeta.v2.BlockService service.
type BlockClient interface {
	NumToID(context.Context, *connect_go.Request[blockmeta_service.NumToIDReq]) (*connect_go.Response[blockmeta_service.BlockResp], error)
	IDToNum(context.Context, *connect_go.Request[blockmeta_service.IDToNumReq]) (*connect_go.Response[blockmeta_service.BlockResp], error)
	Head(context.Context, *connect_go.Request[blockmeta_service.Empty]) (*connect_go.Response[blockmeta_service.BlockResp], error)
}

// NewBlockClient constructs a client for the sf.blockmeta.v2.BlockService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBlockClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BlockClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &blockClient{
		numToID: connect_go.NewClient[blockmeta_service.NumToIDReq, blockmeta_service.BlockResp](
			httpClient,
			baseURL+BlockNumToIDProcedure,
			opts...,
		),
		iDToNum: connect_go.NewClient[blockmeta_service.IDToNumReq, blockmeta_service.BlockResp](
			httpClient,
			baseURL+BlockIDToNumProcedure,
			opts...,
		),
		head: connect_go.NewClient[blockmeta_service.Empty, blockmeta_service.BlockResp](
			httpClient,
			baseURL+BlockHeadProcedure,
			opts...,
		),
	}
}

// blockClient implements BlockClient.
type blockClient struct {
	numToID *connect_go.Client[blockmeta_service.NumToIDReq, blockmeta_service.BlockResp]
	iDToNum *connect_go.Client[blockmeta_service.IDToNumReq, blockmeta_service.BlockResp]
	head    *connect_go.Client[blockmeta_service.Empty, blockmeta_service.BlockResp]
}

// NumToID calls sf.blockmeta.v2.BlockService.NumToID.
func (c *blockClient) NumToID(ctx context.Context, req *connect_go.Request[blockmeta_service.NumToIDReq]) (*connect_go.Response[blockmeta_service.BlockResp], error) {
	return c.numToID.CallUnary(ctx, req)
}

// IDToNum calls sf.blockmeta.v2.BlockService.IDToNum.
func (c *blockClient) IDToNum(ctx context.Context, req *connect_go.Request[blockmeta_service.IDToNumReq]) (*connect_go.Response[blockmeta_service.BlockResp], error) {
	return c.iDToNum.CallUnary(ctx, req)
}

// Head calls sf.blockmeta.v2.BlockService.Head.
func (c *blockClient) Head(ctx context.Context, req *connect_go.Request[blockmeta_service.Empty]) (*connect_go.Response[blockmeta_service.BlockResp], error) {
	return c.head.CallUnary(ctx, req)
}

// BlockHandler is an implementation of the sf.blockmeta.v2.BlockService service.
type BlockHandler interface {
	NumToID(context.Context, *connect_go.Request[blockmeta_service.NumToIDReq]) (*connect_go.Response[blockmeta_service.BlockResp], error)
	IDToNum(context.Context, *connect_go.Request[blockmeta_service.IDToNumReq]) (*connect_go.Response[blockmeta_service.BlockResp], error)
	Head(context.Context, *connect_go.Request[blockmeta_service.Empty]) (*connect_go.Response[blockmeta_service.BlockResp], error)
}

// NewBlockHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBlockHandler(svc BlockHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(BlockNumToIDProcedure, connect_go.NewUnaryHandler(
		BlockNumToIDProcedure,
		svc.NumToID,
		opts...,
	))
	mux.Handle(BlockIDToNumProcedure, connect_go.NewUnaryHandler(
		BlockIDToNumProcedure,
		svc.IDToNum,
		opts...,
	))
	mux.Handle(BlockHeadProcedure, connect_go.NewUnaryHandler(
		BlockHeadProcedure,
		svc.Head,
		opts...,
	))
	return "/sf.blockmeta.v2.BlockService/", mux
}

// UnimplementedBlockHandler returns CodeUnimplemented from all methods.
type UnimplementedBlockHandler struct{}

func (UnimplementedBlockHandler) NumToID(context.Context, *connect_go.Request[blockmeta_service.NumToIDReq]) (*connect_go.Response[blockmeta_service.BlockResp], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sf.blockmeta.v2.BlockService.NumToID is not implemented"))
}

func (UnimplementedBlockHandler) IDToNum(context.Context, *connect_go.Request[blockmeta_service.IDToNumReq]) (*connect_go.Response[blockmeta_service.BlockResp], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sf.blockmeta.v2.BlockService.IDToNum is not implemented"))
}

func (UnimplementedBlockHandler) Head(context.Context, *connect_go.Request[blockmeta_service.Empty]) (*connect_go.Response[blockmeta_service.BlockResp], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sf.blockmeta.v2.BlockService.Head is not implemented"))
}

// BlockByTimeClient is a client for the sf.blockmeta.v2.BlockByTimeService service.
type BlockByTimeClient interface {
	At(context.Context, *connect_go.Request[blockmeta_service.TimeReq]) (*connect_go.Response[blockmeta_service.BlockResp], error)
	After(context.Context, *connect_go.Request[blockmeta_service.RelativeTimeReq]) (*connect_go.Response[blockmeta_service.BlockResp], error)
	Before(context.Context, *connect_go.Request[blockmeta_service.RelativeTimeReq]) (*connect_go.Response[blockmeta_service.BlockResp], error)
}

// NewBlockByTimeClient constructs a client for the sf.blockmeta.v2.BlockByTimeService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBlockByTimeClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BlockByTimeClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &blockByTimeClient{
		at: connect_go.NewClient[blockmeta_service.TimeReq, blockmeta_service.BlockResp](
			httpClient,
			baseURL+BlockByTimeAtProcedure,
			opts...,
		),
		after: connect_go.NewClient[blockmeta_service.RelativeTimeReq, blockmeta_service.BlockResp](
			httpClient,
			baseURL+BlockByTimeAfterProcedure,
			opts...,
		),
		before: connect_go.NewClient[blockmeta_service.RelativeTimeReq, blockmeta_service.BlockResp](
			httpClient,
			baseURL+BlockByTimeBeforeProcedure,
			opts...,
		),
	}
}

// blockByTimeClient implements BlockByTimeClient.
type blockByTimeClient struct {
	at     *connect_go.Client[blockmeta_service.TimeReq, blockmeta_service.BlockResp]
	after  *connect_go.Client[blockmeta_service.RelativeTimeReq, blockmeta_service.BlockResp]
	before *connect_go.Client[blockmeta_service.RelativeTimeReq, blockmeta_service.BlockResp]
}

// At calls sf.blockmeta.v2.BlockByTimeService.At.
func (c *blockByTimeClient) At(ctx context.Context, req *connect_go.Request[blockmeta_service.TimeReq]) (*connect_go.Response[blockmeta_service.BlockResp], error) {
	return c.at.CallUnary(ctx, req)
}

// After calls sf.blockmeta.v2.BlockByTimeService.After.
func (c *blockByTimeClient) After(ctx context.Context, req *connect_go.Request[blockmeta_service.RelativeTimeReq]) (*connect_go.Response[blockmeta_service.BlockResp], error) {
	return c.after.CallUnary(ctx, req)
}

// Before calls sf.blockmeta.v2.BlockByTimeService.Before.
func (c *blockByTimeClient) Before(ctx context.Context, req *connect_go.Request[blockmeta_service.RelativeTimeReq]) (*connect_go.Response[blockmeta_service.BlockResp], error) {
	return c.before.CallUnary(ctx, req)
}

// BlockByTimeHandler is an implementation of the sf.blockmeta.v2.BlockByTimeService service.
type BlockByTimeHandler interface {
	At(context.Context, *connect_go.Request[blockmeta_service.TimeReq]) (*connect_go.Response[blockmeta_service.BlockResp], error)
	After(context.Context, *connect_go.Request[blockmeta_service.RelativeTimeReq]) (*connect_go.Response[blockmeta_service.BlockResp], error)
	Before(context.Context, *connect_go.Request[blockmeta_service.RelativeTimeReq]) (*connect_go.Response[blockmeta_service.BlockResp], error)
}

// NewBlockByTimeHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBlockByTimeHandler(svc BlockByTimeHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(BlockByTimeAtProcedure, connect_go.NewUnaryHandler(
		BlockByTimeAtProcedure,
		svc.At,
		opts...,
	))
	mux.Handle(BlockByTimeAfterProcedure, connect_go.NewUnaryHandler(
		BlockByTimeAfterProcedure,
		svc.After,
		opts...,
	))
	mux.Handle(BlockByTimeBeforeProcedure, connect_go.NewUnaryHandler(
		BlockByTimeBeforeProcedure,
		svc.Before,
		opts...,
	))
	return "/sf.blockmeta.v2.BlockByTimeService/", mux
}

// UnimplementedBlockByTimeHandler returns CodeUnimplemented from all methods.
type UnimplementedBlockByTimeHandler struct{}

func (UnimplementedBlockByTimeHandler) At(context.Context, *connect_go.Request[blockmeta_service.TimeReq]) (*connect_go.Response[blockmeta_service.BlockResp], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sf.blockmeta.v2.BlockByTimeService.At is not implemented"))
}

func (UnimplementedBlockByTimeHandler) After(context.Context, *connect_go.Request[blockmeta_service.RelativeTimeReq]) (*connect_go.Response[blockmeta_service.BlockResp], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sf.blockmeta.v2.BlockByTimeService.After is not implemented"))
}

func (UnimplementedBlockByTimeHandler) Before(context.Context, *connect_go.Request[blockmeta_service.RelativeTimeReq]) (*connect_go.Response[blockmeta_service.BlockResp], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sf.blockmeta.v2.BlockByTimeService.Before is not implemented"))
}
