syntax = "proto3";
package sf.blockmeta.v2;
import "google/protobuf/timestamp.proto";

option go_package = "github.com/streamingfast/blockmeta-service/server/pb/sf/blockmeta/v2;pbbmsrv";

//The Block service offers functionalities to map block numbers to block IDs, block IDs to their corresponding block numbers, and to retrieve the latest block information.
service Block {
  // Returns the (block ID, number, and timestamp), given a block number.
  rpc NumToID (NumToIDReq) returns (BlockResp);
  // Returns the (block ID, number, and timestamp), given a block ID.
  rpc IDToNum(IDToNumReq) returns (BlockResp);
  // Returns the latest block's ID, number, and timestamp.
  rpc Head(Empty) returns (BlockResp);

}

message Empty {}

// The BlockByTime service provides capabilities to query block information based on specific timestamps.
service BlockByTime {
  // Returns the block at a specified timestamp.
  rpc At (TimeReq) returns (BlockResp);
  // Returns the first block after a specified timestamp (or the block at the specified timestamp if it exists, if the query is inclusive).
  rpc After (RelativeTimeReq) returns (BlockResp);
  // Returns the last block before a specified timestamp (or the block at the specified timestamp if it exists, if the query is inclusive).
  rpc Before (RelativeTimeReq) returns (BlockResp);
}

// Block Requests
message NumToIDReq {
  uint64 blockNum = 1;
}

message IDToNumReq {
  string blockID = 1;
}

// Block & BlockByTime Responses
message BlockResp {
  string id = 1;
  uint64 num = 2;
  google.protobuf.Timestamp time = 3;
}

// BlockByTime Requests
message TimeReq {
  google.protobuf.Timestamp time = 1;
}

// Used to query block information after or before a specific timestamp. It include a boolean flag to indicate if the query is inclusive or not (if the block at the specified timestamp should be included in the response or not).
message RelativeTimeReq {
  google.protobuf.Timestamp time = 1;
  bool inclusive = 2;
}

